@using RPG.Engine
@using RPG.Engine.Ids
@using RPG.Engine.Services
@using RPG.Data
@using RPG.Services
@inject StatService StatService
@inject FunctionService FunctionService
@inject Random Random
@inject Chat Chat
@inject Events Events

@Stat.Id:
<input type="number" size="2" required @onchange="@OnChangeEvent" value="@((int)Stat.GetVariable(_baseId))" readonly="@_readOnly" /> @_cost @if (OnRolled != null)
{<button @onclick="Roll">roll</button>}

@code {
#nullable disable // checked in OnInitialized
    [Parameter]
    public Stat Stat { get; set; }

    private VariableId _baseId;
#nullable restore

    [Parameter]
    public Action<int>? OnChange { get; set; }
    [Parameter]
    public Action<int>? OnRolled { get; set; }

    private int _cost = 0;
    private bool _readOnly;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (Stat == null)
            throw new ArgumentNullException(nameof(Stat));

        _readOnly = OnChange == null;
        if (!_readOnly)
        {
            _baseId = new VariableId(".base", Stat.Id);
        }

        Events.SheetUpdated += (_, __) => OnExternalChange();

        StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            OnExternalChange();
    }

    private void OnExternalChange()
    {
        Stat = StatService.Get(Stat.Id);
        if (FunctionService.Exists(new FunctionId("$XP_TOTAL")))
        {
            var newCost = XpTotalCost((int) Stat.GetVariable(_baseId));
            if (newCost != _cost)
                OnChange?.Invoke(newCost);
            _cost = newCost;
        }

        StateHasChanged();
    }

    private void OnChangeEvent(ChangeEventArgs e)
    {
        var baseValue = (int)Stat.GetVariable(_baseId);
        if (OnChange == null)
            return;

        var newBase = int.Parse((string)e.Value);

        if (newBase < 1)
        {
            newBase = 1;
            StateHasChanged();
        }

        int cost;
        if (newBase > baseValue)
            cost = XpChange(baseValue, newBase);
        else
            cost = -XpChange(newBase, baseValue);

        baseValue = newBase;
        Stat.AddOrUpdateVariable(_baseId, baseValue);
        _cost = XpCost(baseValue);

        //todo event statService
        OnChange(cost);
    }

    private int XpChange(int currentSkill, int newSkill)
        => Enumerable.Range(currentSkill, Math.Abs(newSkill - currentSkill))
                     .Select(XpCost)
                     .Sum();

    private int XpCost(int currentSkill)
        => (int)FunctionService.Execute(new FunctionId("$XP"), new object[] { (double)currentSkill });

    private int XpTotalCost(int currentSkill)
        => (int)FunctionService.Execute(new FunctionId("$XP_TOTAL"), new object[] { (double)currentSkill, (double)0 });

    private void Roll(MouseEventArgs e)
    {
        var skill = (int)Stat.Resolve();
        var ability = (int)Stat.GetVariable(new VariableId(".caracteristique", Stat.Id)); //TODO

        var canExplode = ability >= 2;
        var target = ability > 0 ? 11 - ability : 10;

        var dices = ExplodingDice(skill, canExplode).ToList();

        if (ability >= 4)
        {
            var nines = dices.Count(d => d == 9);
            dices.AddRange(ExplodingDice(nines / 2, canExplode));
        }

        var success = dices.Count(d => d >= target);
        if (ability <= 0)
            success -= dices.Count(d => d <= 1 + ability);

        Chat.Log($"{Stat.Id} {string.Join(" ", dices)} ({success} succÃ¨s)");

        OnRolled(success);
    }

    private IEnumerable<int> ExplodingDice(int count, bool canExplode)
        => Enumerable.Range(0, count)
                     .SelectMany(_ => ExplodingDie(canExplode));

    private IEnumerable<int> ExplodingDie(bool canExplode)
    {
        int roll;
        while ((roll = Random.Next(1, 11)) == 10 && canExplode)
            yield return roll;
        yield return roll;
    }

    private int RollDie()
        => (int)FunctionService.Execute(new FunctionId("$GD"), new object[] { (double)1 });

}