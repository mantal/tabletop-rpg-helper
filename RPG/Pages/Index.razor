@page "/"
@using Blazorise
@using Newtonsoft.Json
@using RPG.Engine.Services
@using JsonException = Newtonsoft.Json.JsonException
@inject StatService StatService

@foreach (var (id, stat) in StatService.Stats)
{
    <div>
        @id: @StatService.GetValue(id) (@stat.ToString())
    </div>
}

<div class="field is-horizontal">
    <div class="field-label"><label class="label">Name</label></div>
    <div class="field-body">
        <div class="field">
            <TextEdit @bind-Text="@_newStatName"></TextEdit>
        </div>
    </div>
</div>
<div class="field is-horizontal">
    <div class="field-label"><label class="label">Base</label></div>
    <div class="field-body">
        <div class="field">
            <NumericEdit TValue="int" @bind-Value="@_newStatBase"></NumericEdit>
        </div>
    </div>
</div>
<div class="field is-horizontal">
    <div class="field-label"><label class="label">Modifiers</label></div>
    <div class="field-body">
        <div class="field">
            <TextEdit @bind-Text="@_newStat"></TextEdit>
        </div>
    </div>
</div>
<button type="button" @onclick=@AddStats>Update</button>


@if (!string.IsNullOrWhiteSpace(_errors))
{
    <div class="notification is-danger">
        <button class="delete" @onclick="@ClearErrors"></button>
        <strong>Error:</strong> @_errors
    </div>
}

<MemoEdit Rows="20" @bind-Text="@_rawStats" />

<button type="button" @onclick=@UpdateStats>Update</button>

@code {

    protected override void OnInitialized()
    {
        SetJson();
    }

    private void SetJson()
    {
        _errors = null;
        //_rawStats = StatService.Serialize();
    }

    #region Json
    private string? _errors = null;
    private string _rawStats = "";

    private void UpdateStats()
    {
        _errors = null;
        //StatService.Deserialize(_rawStats);
        SetJson();
        StateHasChanged();
    }
    #endregion

    #region Human

    private string _newStat = string.Empty;
    private string _newStatName = string.Empty;
    private int _newStatBase;

    private void AddStats()
    {
        var errors = StatService.Add(_newStatName, _newStatBase, _newStat);

        if (errors.Any())
        {
            _errors = errors.Aggregate((a, b) => a + b);
            return;
        }

        _newStat = string.Empty;
        _newStatName = string.Empty;
        _newStatBase = default;
        SetJson();
    }

    #endregion

    private void ClearErrors() => _errors = default;
}
